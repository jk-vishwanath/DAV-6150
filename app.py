# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F8WAJ-CjYRVFnY0zyuLJL6zcVtb25hnh
"""

import streamlit as st
from PIL import Image
import numpy as np
import tensorflow as tf  # Replace with torch if using PyTorch

# Load the model
@st.cache_resource
def load_model():
    # For TensorFlow/Keras
    model = tf.keras.models.load_model('model.h5')  # Replace with your model file
    return model

model = load_model()

# Define preprocessing function
def preprocess_image(image):
    """
    Preprocess the uploaded image to match the input shape required by the model.
    """
    image = image.resize((224, 224))  # Adjust size based on your model
    image = np.array(image) / 255.0  # Normalize pixel values
    image = np.expand_dims(image, axis=0)  # Add batch dimension
    return image

# Streamlit UI
st.title("Vision Classification Model")
st.write("Upload an image to classify.")

# File uploader
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Display uploaded image
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)

    # Preprocess and classify
    st.write("Classifying...")
    processed_image = preprocess_image(image)
    predictions = model.predict(processed_image)
    predicted_class = np.argmax(predictions, axis=1)

    # Display result
    st.write(f"Predicted Class: {predicted_class}")
    st.write(f"Confidence: {np.max(predictions) * 100:.2f}%")